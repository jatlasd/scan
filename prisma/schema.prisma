// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  createdAt   DateTime         @default(now())
  phoneNumber String           @default("n/a")
  isVerified  Boolean          @default(false)
  settings    UserSettings[]
  products    UserProduct[]
  ingredients UserIngredient[]
}

model UserSettings {
  id                 String  @id @default(uuid())
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id])
  emailNotifications Boolean @default(true)
  theme              String  @default("light")
  language           String  @default("en")

  defaultLookupMethod String @default("CAMERA")
  // TODO add things like dietaryRestrictions
}

model GlobalProduct {
  upc                String        @id @default(uuid())
  source             String
  type               String        @default("food")
  name               String
  brand              String
  image              String
  ingredients        String[]
  allergentStatement String?
  userProducts       UserProduct[]
}

model UserProduct {
  id              String           @id @default(uuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  globalProductId String
  globalProduct   GlobalProduct    @relation(fields: [globalProductId], references: [upc], onDelete: Cascade)
  createdAt       DateTime         @default(now())
  reaction        String?
  ingredients     UserIngredient[] @relation("UserIngredientToUserProduct")
}

model UserIngredient {
  id       String        @id @default(uuid())
  userId   String
  user     User          @relation(fields: [userId], references: [id])
  name     String
  count    Int           @default(1)
  warn     Boolean       @default(false)
  avoid    Boolean       @default(false)
  ignore   Boolean       @default(false)
  products UserProduct[] @relation("UserIngredientToUserProduct")
}
